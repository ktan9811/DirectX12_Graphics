// 모든 모델링은 다 삼각형의 집합으로 이루어져 있음.

// GPU와 렌더링 파이프라인
// 모든 그래픽 렌더링을 CPU가 다 계산하는 것은 비효율적.
// 따라서 단순한 계산을 많이 할 수 있는 유닛이 많은 GPU가 렌더링을 계산해줌.
// 암호학, 인공지능, 블록체인에서도 GPU가 사용되는 이유도 위와 같음.

// 렌더링 파이프라인
// Input Assembler : 정점 정보들을 전달
// Vertex Shader   : 인풋으로 받은 정점들을 대상으로 연산 (모핑 등등)


//---Tesselation-- : 정점의 개수를 늘려줌 ( ex. 멀리있는건 조금, 가까이 있는건 많이)
//|         L 구버전 DirectX에서는 없음
//| Hull Shader    :
//| Tesselator     :
//| Domain Shadr   :
//----------------
// Geometry Shader :

// Rasterizer      : 정점 데이터를 기반으로 픽셀로 구분
// Pixel Shader    : 픽셀을 조정 혹은 변경 해줌.
// Output Merger   : 최종 색상을 결정.

// 그래서 DirectX가 뭔데?
// 아니 GPU마다 사양 성능이 다 다른데 어떻게 같은 일을 줄수가 없잖아.
// 프로그래머들이 전부 다 짜는것도 너무 힘들고
// 그래서 마이크로소프트가 제공하는 라이브러리가 DirectX야
// 그래서 DirectX를 통해 GPU에게 일감을 주면! 우리는 무슨 GPU인지 신경을 안써도 된다는거지

// --------------------------------------------------------------------
// [1] pch
// [2] 정적 라이브러리 [.lib] vs 동적 라이브러리 [.dll]